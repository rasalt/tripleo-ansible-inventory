#!/usr/bin/python2

# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""
Connect to an OpenStack cloud.

For a full guide see TODO(etoews):link to docs on developer.openstack.org
"""
from __future__ import print_function

import argparse
import os
import json

import os_client_config

from openstack import connection
from openstack import profile
from openstack import utils
import sys
from oslo_config import cfg

utils.enable_logging(False, stream=sys.stdout)

def create_connection_from_config():
    opts = Opts(cloud_name=TEST_CLOUD)
    occ = os_client_config.OpenStackConfig()
    cloud = occ.get_one_cloud(opts.cloud)
    return connection.from_config(cloud_config=cloud, options=opts)


def create_connection_from_args():
    parser = argparse.ArgumentParser()
    config = os_client_config.OpenStackConfig()
    config.register_argparse_arguments(parser, sys.argv[1:])
    args = parser.parse_args()
    return connection.from_config(options=args)


def create_connection(auth_url, region, project_name, username, password):
    prof = profile.Profile()
    prof.set_region(profile.Profile.ALL, region)

    return connection.Connection(
        profile=prof,
        user_agent='examples',
        auth_url=auth_url,
        project_name=project_name,
        username=username,
        password=password
    )

opts = [
    cfg.StrOpt('host', help='List details about the specific host'),
    cfg.BoolOpt('list', help='List active hosts'),
    cfg.StrOpt('username', default=os.environ.get('OS_USERNAME')),
    cfg.StrOpt('password', default=os.environ.get('OS_PASSWORD')),
    cfg.StrOpt('auth_url', default=os.environ.get('OS_AUTH_URL')),
    cfg.StrOpt('auth_token', default=os.environ.get('OS_AUTH_TOKEN')),
    cfg.StrOpt('project_name', default=os.environ.get('OS_TENANT_NAME')),
    cfg.StrOpt('cacert', default=os.environ.get('OS_CACERT')),
    cfg.StrOpt('plan', default=os.environ.get('TRIPLEO_PLAN_NAME')),
    cfg.StrOpt('region', default='regionOne')                     #May want to change later 
]


def _parse_config():
    default_config = os.environ.get('TRIPLEO_INVENTORY_CONFIG')
    if default_config:
        default_config = [default_config]

    configs = cfg.ConfigOpts()
    configs.register_cli_opts(opts)
    configs(prog='tripleo-ansible-inventory',
            default_config_files=default_config)
    if configs.auth_url is None:
        print('ERROR: auth_url not defined and OS_AUTH_URL environment '
              'variable missing, unable to proceed.', file=sys.stderr)
        sys.exit(1)
#RK: This conversion to v3 does not look required. The original v2 url works well 

#    if '/v2.0' in configs.auth_url:
#        configs.auth_url = configs.auth_url.replace('/v2.0', '/v3')
    if not configs.plan:
        configs.plan = 'overcloud'
    return configs

class TripleoInventory(object):
    def __init__(self, configs):
        self.configs = configs

        self.conn = create_connection(
            configs.auth_url, 
            configs.region, 
            configs.project_name,
            configs.username,
            configs.password)
        try:
            self.hclient = os_client_config.make_client('orchestration',
                auth_url=configs.auth_url,
                username=configs.username,
                password=configs.password,
                region_name=configs.region,
                project_name=configs.project_name)

            self.nclient = os_client_config.make_client('compute',
                auth_url=configs.auth_url,
                username=configs.username, 
                password=configs.password,
                region_name=configs.region,
                project_name=configs.project_name)
         
        except Exception as e:
            print("Error connecting to Heat/Nova: {}".format(e.message),
                file=sys.stderr)
            sys.exit(1)

        
    def fetch_server_resources(self):
        ret = dict() 
        try:
 	    for server in self.conn.compute.servers():
                addr = () 
                # Get the flavor id 
	        flavor_id = server.flavor['id']
	        flavor = self.conn.compute.get_flavor(flavor_id)
	        flavor_id = server.flavor['id']
                addr = server.addresses['ctlplane']
                # Append the address of the server to the flavor name 
                if flavor.name in ret: 
                    ret[flavor.name].append(addr[0]['addr'])
                else:
                    ret[flavor.name] = [addr[0]['addr']]
                
	except Exception:
	    # Ignore non existent stacks or resources
	    pass
        return ret

#TBD: Broken 
    def get_overcloud_environment(self):
        try:
            stack = self.conn.orchestration.find_stack(self.configs.plan)
            environment = self.conn.orchestration.get_stack_environment(stack)
            if environment:
                return environment.input
 
        except Exception, e:
            print("exception %s"%str(e))

    def get_overcloud_output(self, output_name):
        try:
            
            stack = self.conn.orchestration.find_stack(self.configs.plan)
	    for output in stack.outputs:
                if output['output_key'] == output_name:
                    return output['output_value']

        except Exception:
            return None

    def fetch_stack_resources(self, resource_name):
        heatclient = self.hclient
        novaclient = self.nclient
        stack = self.configs.plan
        ret = []
        try:
            resource_id = heatclient.resources.get(stack, resource_name) \
                .physical_resource_id
            for resource in heatclient.resources.list(resource_id):
                node = heatclient.resources.get(resource_id,
                                                resource.resource_name)
                node_resource = node.attributes['nova_server_resource']
                nova_server = novaclient.servers.get(node_resource)
                if nova_server.status == 'ACTIVE':
                    ret.append(nova_server.networks['ctlplane'][0])
        except Exception:
            # Ignore non existent stacks or resources
            pass
        return ret

    def list(self):
        ret = {
            'undercloud': {
                'hosts': ['localhost'],
                'vars': {
                    'ansible_connection': 'local',
                },
            }
        }
        
        endpoint_map = self.get_overcloud_output('EndpointMap')
        if endpoint_map:
	    horizon_endpoint = endpoint_map.get('HorizonPublic', {}).get('uri')
	    if horizon_endpoint:
	        ret['undercloud']['vars']['overcloud_horizon_url'] = horizon_endpoint

        public_vip = self.get_overcloud_output('PublicVip')
        if public_vip:
            ret['undercloud']['vars']['overcloud_public_vip'] = public_vip

        keystone_url = self.get_overcloud_output('KeystoneURL')
        if keystone_url:
            ret['undercloud']['vars']['overcloud_keystone_url'] = keystone_url

        #HACK: Needs to be gotten from the environment
	if self.configs.password:
	    ret['undercloud']['vars']['overcloud_admin_password'] = self.configs.password

        #TBD: Needs code fix to get the environment properly TBD
        #overcloud_environment = self.get_overcloud_environment()
 
        servers = self.fetch_server_resources()
        for keys,values in servers.items():
            ret[keys] = values;

        #Special consideration for 'controller' host group since 
        #the tripleo validations depend on it
        if 'controller' not in ret.keys():
	    controller_group = self.fetch_stack_resources('Controller')
            if controller_group:
                ret['controller'] = controller_group

        #Special consideration for 'compute' host group since 
        #the tripleo validations depend on it
        if 'compute' not in ret.keys():
	    compute_group = self.fetch_stack_resources('Compute')
            if compute_group:
                ret['compute'] = compute_group
  
        ret['overcloud'] = {
	    'children': list(set(ret.keys()) - set(['undercloud'])),
	       'vars': {
		         # TODO(mandre) retrieve SSH user from heat
		         'ansible_ssh_user': 'heat-admin',
		    }
		}
        print(json.dumps(ret))

    def host(self):
        # NOTE(mandre)
        # Dynamic inventory scripts must return empty json if they don't
        # provide detailed info for hosts:
        # http://docs.ansible.com/ansible/developing_inventory.html
        print(json.dumps({}))

def main():
    configs = _parse_config()
    inventory = TripleoInventory(configs)
    if configs.list:
        inventory.list()
    elif configs.host:
        inventory.host()
    sys.exit(0)

if __name__ == '__main__':
    main()

